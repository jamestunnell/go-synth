// Code generated by MockGen. DO NOT EDIT.
// Source: core.go

// Package nodetest is a generated GoMock package.
package nodetest

import (
	gomock "github.com/golang/mock/gomock"
	node "github.com/jamestunnell/go-synth/node"
	reflect "reflect"
)

// MockCore is a mock of Core interface
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// InputNames mocks base method
func (m *MockCore) InputNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// InputNames indicates an expected call of InputNames
func (mr *MockCoreMockRecorder) InputNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputNames", reflect.TypeOf((*MockCore)(nil).InputNames))
}

// ControlNames mocks base method
func (m *MockCore) ControlNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ControlNames indicates an expected call of ControlNames
func (mr *MockCoreMockRecorder) ControlNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlNames", reflect.TypeOf((*MockCore)(nil).ControlNames))
}

// Initialize mocks base method
func (m *MockCore) Initialize(srate float64, inputs, controls node.Map) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", srate, inputs, controls)
}

// Initialize indicates an expected call of Initialize
func (mr *MockCoreMockRecorder) Initialize(srate, inputs, controls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCore)(nil).Initialize), srate, inputs, controls)
}

// Configure mocks base method
func (m *MockCore) Configure() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure")
}

// Configure indicates an expected call of Configure
func (mr *MockCoreMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockCore)(nil).Configure))
}

// Run mocks base method
func (m *MockCore) Run(arg0 *node.Buffer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run
func (mr *MockCoreMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCore)(nil).Run), arg0)
}
